# network_scanner.py - C√¥ng c·ª• qu√©t m·∫°ng v√† c·ªïng n√¢ng c·∫•p

import socket
import ping3
import ipaddress  # Th∆∞ vi·ªán c√≥ s·∫µn trong Python 3, d√πng ƒë·ªÉ x·ª≠ l√Ω d·∫£i IP
import sys  # D√πng ƒë·ªÉ tho√°t ch∆∞∆°ng tr√¨nh khi g·∫∑p l·ªói


# --- Ch·ª©c nƒÉng 1: Ki·ªÉm tra Ho·∫°t ƒë·ªông (Ping) ---
def check_host_status(ip_address):
    """Ki·ªÉm tra xem Host c√≥ ph·∫£n h·ªìi (ping) hay kh√¥ng."""
    try:
        # S·ª≠ d·ª•ng ping3.ping. Timeout ƒë∆∞·ª£c ƒë·∫∑t l√† 1.5 gi√¢y.
        delay = ping3.ping(str(ip_address), timeout=1.5)

        if isinstance(delay, float):
            return True, delay * 1000  # Tr·∫£ v·ªÅ True v√† th·ªùi gian ph·∫£n h·ªìi (ms)
        else:
            return False, None

    except Exception:
        return False, None


# --- Ch·ª©c nƒÉng 2: Qu√©t C·ªïng (Port Scanner) ---
def port_scan(ip_address, ports):
    """Qu√©t c√°c c·ªïng TCP ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh tr√™n Host."""
    open_ports = []

    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)

        result = sock.connect_ex((str(ip_address), port))

        if result == 0:
            # L·∫•y t√™n d·ªãch v·ª•
            service = "Unknown"
            try:
                # Ch·ªâ l·∫•y t√™n d·ªãch v·ª• cho c√°c c·ªïng ti√™u chu·∫©n (d∆∞·ªõi 1024)
                if port < 1024:
                    service = socket.getservbyport(port, "tcp")
            except OSError:
                pass

            open_ports.append((port, service))

        sock.close()

    return open_ports


# --- Kh·ªëi Ch√≠nh ƒë·ªÉ Ch·∫°y Script v√† X·ª≠ l√Ω D·∫£i IP ---
if __name__ == "__main__":

    # ƒê·ªãnh nghƒ©a danh s√°ch c√°c c·ªïng ph·ªï bi·∫øn ƒë·ªÉ qu√©t
    common_ports = [21, 22, 23, 25, 53, 80, 110, 443, 3389, 8080]

    print("üöÄ PYTHON NETWORK SCANNER (VER 1.1)")
    print("-----------------------------------")

    target_input = input("Nh·∫≠p IP m·ª•c ti√™u ho·∫∑c D·∫£i IP (v√≠ d·ª•: 192.168.1.1 ho·∫∑c 192.168.1.0/24): ")

    try:
        # Ki·ªÉm tra xem ƒë·∫ßu v√†o l√† d·∫£i m·∫°ng hay IP ƒë∆°n l·∫ª
        hosts_to_scan = ipaddress.ip_network(target_input, strict=False).hosts()
        is_range = True
    except ValueError:
        # N·∫øu kh√¥ng ph·∫£i d·∫£i m·∫°ng, coi l√† IP ƒë∆°n l·∫ª
        try:
            hosts_to_scan = [ipaddress.ip_address(target_input)]
            is_range = False
        except ValueError:
            print(f"[L·ªñI] ƒê·ªãa ch·ªâ '{target_input}' kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            sys.exit(1)

    # Bi·∫øn ƒë·∫øm Host ho·∫°t ƒë·ªông
    active_hosts_count = 0

    # B·∫Øt ƒë·∫ßu qu√©t t·ª´ng Host
    for host_ip in hosts_to_scan:

        host_ip = str(host_ip)
        print(f"\n[SCAN] ƒêang x·ª≠ l√Ω Host: {host_ip}")

        # B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i Host
        is_up, response_time = check_host_status(host_ip)

        if is_up:
            active_hosts_count += 1
            print(f"\t Host ƒëang ho·∫°t ƒë·ªông (Ph·∫£n h·ªìi: {response_time:.2f}ms)")

            # Ti·∫øn h√†nh qu√©t c·ªïng
            open_ports = port_scan(host_ip, common_ports)

            if open_ports:
                print(f"\t C·ªïng M·ªü T√¨m Th·∫•y:")
                for port, service in open_ports:
                    print(f"\t\t- {port}/TCP ({service})")
            else:
                print("\t Kh√¥ng t√¨m th·∫•y c·ªïng ph·ªï bi·∫øn n√†o ƒëang m·ªü.")
        else:
            if not is_range:  # Ch·ªâ in th√¥ng b√°o n·∫øu l√† IP ƒë∆°n l·∫ª
                print("\t Host kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng ph·∫£n h·ªìi Ping.")

    print("\n-----------------------------------")
    print(f"T·ªïng Host ƒëang ho·∫°t ƒë·ªông: {active_hosts_count}")
